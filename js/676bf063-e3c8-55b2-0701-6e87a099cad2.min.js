/* Minifyed by 13ninstudio, Inc */ const b64ToBuf=t=>Uint8Array.from(atob(t),(t=>t.charCodeAt(0))),bufToB64=t=>btoa(String.fromCharCode(...new Uint8Array(t)));async function deriveKeyFromPassphrase(t,e,n,r=256){const o=new TextEncoder,a=await crypto.subtle.importKey("raw",o.encode(t),"PBKDF2",!1,["deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",salt:e,iterations:n,hash:"SHA-256"},a,{name:"AES-GCM",length:r},!1,["encrypt","decrypt"])}function randomBytes(t){const e=new Uint8Array(t);return crypto.getRandomValues(e),e}async function encryptText(t,e,n,r){const o=new TextEncoder,a=randomBytes(16),s=randomBytes(12),u=await deriveKeyFromPassphrase(e,a,n),c=await crypto.subtle.encrypt({name:"AES-GCM",iv:s,tagLength:r},u,o.encode(t));return{salt:bufToB64(a),iv:bufToB64(s),iterations:n,tagLength:r,ciphertext:bufToB64(c)}}async function decryptObject(t,e){const n=new TextDecoder;try{const r=b64ToBuf(t.salt),o=b64ToBuf(t.iv),a=Number(t.iterations)||1e5,s=Number(t.tagLength)||128,u=b64ToBuf(t.ciphertext).buffer,c=await deriveKeyFromPassphrase(e,r,a),i=await crypto.subtle.decrypt({name:"AES-GCM",iv:o,tagLength:s},c,u);return n.decode(i)}catch(t){throw new Error("復号に失敗しました: "+t.message)}}const inputText=document.getElementById("inputText"),passphrase=document.getElementById("passphrase"),iterationsInput=document.getElementById("iterations"),tagLengthInput=document.getElementById("tagLength"),output=document.getElementById("output"),encryptBtn=document.getElementById("encryptBtn"),decryptBtn=document.getElementById("decryptBtn"),genKeyBtn=document.getElementById("genKeyBtn");encryptBtn.addEventListener("click",(async()=>{output.textContent="処理中...";try{const t=passphrase.value||prompt("パスフレーズを入力してください（空の場合はキャンセル）");if(!t)return void(output.textContent="キャンセルされました");const e=Number(iterationsInput.value)||1e5,n=Number(tagLengthInput.value)||128,r=await encryptText(inputText.value,t,e,n);output.textContent=JSON.stringify(r,null,2)}catch(t){output.textContent="エラー: "+t.message}})),decryptBtn.addEventListener("click",(async()=>{output.textContent="処理中...";try{let t;try{t=JSON.parse(inputText.value)}catch(t){throw new Error("入力はJSONである必要があります")}const e=passphrase.value||prompt("復号用パスフレーズを入力してください（空の場合はキャンセル）");if(!e)return void(output.textContent="キャンセルされました");const n=await decryptObject(t,e);output.textContent=n}catch(t){output.textContent="エラー: "+t.message}})),genKeyBtn.addEventListener("click",(()=>{const t=["sun","moon","river","mount","leaf","stone","blue","red","fast","silent","iron","glass","witch","magical","hypnosys","curse","devil"];let e=[];for(let n=0;n<4;n++)e.push(t[Math.floor(Math.random()*t.length)]);passphrase.value=e.join("-")+Math.floor(1e3*Math.random())}));
